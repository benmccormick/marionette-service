/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,e){"use strict";"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("backbone"),require("backbone.radio"),require("underscore")):"function"==typeof define&&define.amd?define(["backbone","backbone.radio","underscore"],e):e(t.Backbone,t.Backbone.Radio,t._)}(this,function(t,e,n){function o(){s.apply(this),n.each(r,function(t,e){var o=n.result(this,e);o&&n.each(o,function(t,n){if(t=a.call(this,t)){var o=n.split(" "),s=o[0],r=o[1];i.call(this,s,e,r,t)}},this)},this)}function i(t,o,i,s){var a=r[o].startMethod;this._radioChannels=this._radioChannels||[],n.contains(this._radioChannels,t)||this._radioChannels.push(t),e[a](t,i,s,this)}function s(){n.each(this._radioChannels,function(t){n.each(r,function(n){e[n.stopMethod](t,null,null,this)},this)},this)}function a(t){return n.isFunction(t)||(t=this[t]),t}var r={radioEvents:{startMethod:"on",stopMethod:"off"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},h=t.Model.extend({constructor:function(){t.Model.apply(this,[].slice.call(arguments)),o.apply(this)},destroy:function(){t.Model.prototype.destroy.apply(this),s.apply(this)}});return t.Service=h,h});
//# sourceMappingURL=marionette-service.min.js.map