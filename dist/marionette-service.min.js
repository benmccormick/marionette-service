/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,e){"use strict";"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("backbone.marionette"),require("backbone.radio"),require("underscore")):"function"==typeof define&&define.amd?define(["backbone.marionette","backbone.radio","underscore"],e):e(t.Marionette,t.Backbone.Radio,t._)}(this,function(t,e,o){function n(){s.apply(this),o.each(r,function(t,e){var n=o.result(this,e);n&&o.each(n,function(t,o){if(t=a.call(this,t)){var n=o.split(" "),s=n[0],r=n[1];i.call(this,s,e,r,t)}},this)},this)}function i(t,n,i,s){var a=r[n].startMethod;this._radioChannels=this._radioChannels||[],o.contains(this._radioChannels,t)||this._radioChannels.push(t),e[a](t,i,s,this)}function s(){o.each(this._radioChannels,function(t){o.each(r,function(o){e[o.stopMethod](t,null,null,this)},this)},this)}function a(t){return o.isFunction(t)||(t=this[t]),t}var r={radioEvents:{startMethod:"on",stopMethod:"off"},radioCommands:{startMethod:"comply",stopMethod:"stopComplying"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},h=t.Object.extend({constructor:function(){t.Object.apply(this),n.apply(this)},destroy:function(){t.Object.prototype.destroy.apply(this),s.apply(this)}});return h});
//# sourceMappingURL=marionette-service.min.js.map