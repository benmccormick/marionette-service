/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("underscore"),require("backbone.marionette"),require("backbone.radio")):"function"==typeof define&&define.amd?define(["underscore","backbone.marionette","backbone.radio"],e):t.Marionette.Service=e(t._,t.Mn,t.Radio)}(this,function(t,e,n){"use strict";function o(){s.apply(this),t.each(r,function(e,n){var o=t.result(this,n);o&&t.each(o,function(t,e){if(t=a.call(this,t)){var o=e.split(" "),s=o[0],r=o[1];i.call(this,s,n,r,t)}},this)},this)}function i(e,o,i,s){var a=r[o].startMethod;this._radioChannels=this._radioChannels||[],t.contains(this._radioChannels,e)||this._radioChannels.push(e),n[a](e,i,s,this)}function s(){t.each(this._radioChannels,function(e){t.each(r,function(t){n[t.stopMethod](e,null,null,this)},this)},this)}function a(e){return t.isFunction(e)||(e=this[e]),e}var r={radioEvents:{startMethod:"on",stopMethod:"off"},radioCommands:{startMethod:"comply",stopMethod:"stopComplying"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},h=e.Object["extends"]({constructor:function(){e.Object.apply(this),o.apply(this)},destroy:function(){e.Object.destroy.apply(this),s.apply(this)}}),c=h;return c});
//# sourceMappingURL=marionette-service.min.js.map