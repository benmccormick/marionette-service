/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,n){"use strict";"object"==typeof exports&&"undefined"!=typeof module?module.exports=n(require("backbone"),require("backbone.radio"),require("underscore")):"function"==typeof define&&define.amd?define(["backbone","backbone.radio","underscore"],n):n(t.Backbone,t.Backbone.Radio,t._)}(this,function(t,n,o){function e(){s.apply(this),o.forEach(a,function(t,n){var e=o.result(this,n);e&&o.forEach(e,function(t,o){if(t=r.call(this,t)){var e=o.split(" "),s=e[0],a=e[1];i.call(this,s,n,a,t)}}.bind(this))}.bind(this))}function i(t,e,i,s){var r=a[e].startMethod;this._radioChannels=this._radioChannels||[],o.includes(this._radioChannels,t)||this._radioChannels.push(t),n[r](t,i,s,this)}function s(){o.forEach(this._radioChannels,function(t){o.forEach(a,function(o){n[o.stopMethod](t,null,null,this)}.bind(this))}.bind(this))}function r(t){return o.isFunction(t)||(t=this[t]),t}var a={radioEvents:{startMethod:"on",stopMethod:"off"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},d=t.Model.extend({constructor:function(){t.Model.apply(this,[].slice.call(arguments)),e.apply(this)},destroy:function(){t.Model.prototype.destroy.apply(this),s.apply(this)}});return t.Service=d,d});
//# sourceMappingURL=marionette-service.min.js.map