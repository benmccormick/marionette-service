/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,e){"use strict";"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("backbone.marionette"),require("backbone.radio"),require("underscore")):"function"==typeof define&&define.amd?define(["backbone.marionette","backbone.radio","underscore"],e):e(t.Marionette,t.Backbone.Radio,t._)}(this,function(t,e,n){function i(){s.apply(this),n.each(r,function(t,e){var i=n.result(this,e);i&&n.each(i,function(t,n){if(t=a.call(this,t)){var i=n.split(" "),s=i[0],r=i[1];o.call(this,s,e,r,t)}},this)},this)}function o(t,i,o,s){var a=r[i].startMethod;this._radioChannels=this._radioChannels||[],n.contains(this._radioChannels,t)||this._radioChannels.push(t),e[a](t,o,s,this)}function s(){n.each(this._radioChannels,function(t){n.each(r,function(n){e[n.stopMethod](t,null,null,this)},this)},this)}function a(t){return n.isFunction(t)||(t=this[t]),t}var r={radioEvents:{startMethod:"on",stopMethod:"off"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},c=t.Object.extend({constructor:function(){t.Object.apply(this,[].slice.call(arguments)),i.apply(this)},destroy:function(){t.Object.prototype.destroy.apply(this),s.apply(this)}});return t.Service=c,c});
//# sourceMappingURL=marionette-service.min.js.map