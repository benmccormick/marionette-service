/**
 * Marionette Service
 *
 * Adds a Service Object to Marionette which allows an Object to
 * receive Backbone.Radio messages in a declarative fashion.
 *
 * @author Ben McCormick
 *
 */
!function(t,o){"use strict";"object"==typeof exports&&"undefined"!=typeof module?module.exports=o(require("backbone"),require("backbone.radio"),require("underscore")):"function"==typeof define&&define.amd?define(["backbone","backbone.radio","underscore"],o):o(t.Backbone,t.Backbone.Radio,t._)}(this,function(t,o,e){function n(){s.apply(this),e.forEach(a,function(t,o){var n=e.result(this,o);n&&e.forEach(n,function(t,e){if(t=r.call(this,t)){var n=e.split(" "),s=n[0],a=n[1];i.call(this,s,o,a,t)}},this)},this)}function i(t,n,i,s){var r=a[n].startMethod;this._radioChannels=this._radioChannels||[],e.includes(this._radioChannels,t)||this._radioChannels.push(t),o[r](t,i,s,this)}function s(){e.forEach(this._radioChannels,function(t){e.forEach(a,function(e){o[e.stopMethod](t,null,null,this)},this)},this)}function r(t){return e.isFunction(t)||(t=this[t]),t}var a={radioEvents:{startMethod:"on",stopMethod:"off"},radioRequests:{startMethod:"reply",stopMethod:"stopReplying"}},h=t.Model.extend({constructor:function(){t.Model.apply(this,[].slice.call(arguments)),n.apply(this)},destroy:function(){t.Model.prototype.destroy.apply(this),s.apply(this)}});return t.Service=h,h});
//# sourceMappingURL=marionette-service.min.js.map